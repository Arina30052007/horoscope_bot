from telebot.types import InlineKeyboardButton
from telebot import types
import telebot
from parser import *
from bd import *
from requests import get

bot = telebot.TeleBot('8101490115:AAGWSt8km_gWTmrYNp1UqXbU3RXmotbQwp8')
ADMIN = ''

zodiac_signs = {
    '‚ôàÔ∏è –û–≤–µ–Ω': 'aries',
    '‚ôâ –¢–µ–ª–µ—Ü': 'taurus',
    '‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã': 'gemini',
    '‚ôãÔ∏è –†–∞–∫': 'cancer',
    '‚ôå –õ–µ–≤': 'leo',
    '‚ôç –î–µ–≤–∞': 'virgo',
    '‚ôé –í–µ—Å—ã': 'libra',
    '‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω': 'scorpio',
    '‚ôê –°—Ç—Ä–µ–ª–µ—Ü': 'sagittarius',
    '‚ôë –ö–æ–∑–µ—Ä–æ–≥': 'capricorn',
    '‚ôí –í–æ–¥–æ–ª–µ–π': 'aquarius',
    '‚ôì –†—ã–±—ã': 'pisces'
}


@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                       one_time_keyboard=False)  # –ó–¥–µ—Å—å –∏–∑–º–µ–Ω–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    col1, col2 = [], []
    for sign in zodiac_signs:
        if len(col1) < 6:
            col1.append(sign)
        else:
            col2.append(sign)
    markup.add(*col1)
    markup.add(*col2)
    wlcmmsg = '<b>üëã –ü—Ä–∏–≤–µ—Ç ' + message.from_user.first_name + '</b>' + '\n\n‚öõÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞'
    bot.send_message(message.from_user.id, text=wlcmmsg, reply_markup=markup, parse_mode="html",
                     disable_web_page_preview=True)

@bot.message_handler(commands=['help'])
def send_welcome(message):
    wlcmmsg = 'ü§î –ù–µ –∑–Ω–∞–µ—à—å —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞? '  +  '\n\n–¢–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –≤–∏–¥–µ "–¥–µ–Ω—å.–º–µ—Å—è—Ü"'
    bot.send_message(message.from_user.id, text=wlcmmsg)



@bot.message_handler(content_types=['text'])
def process_step(message):
    k = a = message.text
    a = a.split('.')
    if len(a) == 2:
        a = [int(i) for i in a]
        if ((a[0] in [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] and a[1] == 3) or
                (a[0] in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] and a[1] == 4)):
            bot.reply_to(message, '–í—ã ‚ôàÔ∏è –û–≤–µ–Ω')
        elif ((a[0] in [21, 22, 23, 24, 25, 26, 27, 28, 29, 30] and a[1] == 4) or
              (a[0] in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] and a[1] == 5)):
            bot.reply_to(message, '–í—ã ‚ôâ –¢–µ–ª–µ—Ü')
        elif ((a[0] in [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] and a[1] == 5) or
              (a[0] in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21] and a[1] == 6)):
            bot.reply_to(message, '–í—ã ‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã')
        elif ((a[0] in [22, 23, 24, 25, 26, 27, 28, 29, 30] and a[1] == 6) or
              (a[0] in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22] and a[1] == 7)):
            bot.reply_to(message, '–í—ã ‚ôãÔ∏è –†–∞–∫')
        elif ((a[0] in [23, 24, 25, 26, 27, 28, 29, 30, 31] and a[1] == 7) or
              (a[0] in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23] and a[1] == 8)):
            bot.reply_to(message, '–í—ã ‚ôå –õ–µ–≤')
        elif ((a[0] in [24, 25, 26, 27, 28, 29, 30, 31] and a[1] == 8) or
              (a[0] in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23] and a[1] == 9)):
            bot.reply_to(message, '–í—ã ‚ôç –î–µ–≤–∞')
        elif ((a[0] in [24, 25, 26, 27, 28, 29, 30] and a[1] == 9) or
              (a[0] in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23] and a[1] == 10)):
            bot.reply_to(message, '–í—ã ‚ôé –í–µ—Å—ã')
        elif ((a[0] in [24, 25, 26, 27, 28, 29, 30, 31] and a[1] == 10) or
              (a[0] in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22] and a[1] == 11)):
            bot.reply_to(message, '–í—ã ‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω')
        elif ((a[0] in [23, 24, 25, 26, 27, 28, 29, 30] and a[1] == 11) or
              (a[0] in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21] and a[1] == 12)):
            bot.reply_to(message, '–í—ã ‚ôê –°—Ç—Ä–µ–ª–µ—Ü')
        elif ((a[0] in [22, 23, 24, 25, 26, 27, 28, 29, 30, 31] and a[1] == 12) or
              (a[0] in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] and a[1] == 1)):
            bot.reply_to(message, '–í—ã ‚ôë –ö–æ–∑–µ—Ä–æ–≥')
        elif ((a[0] in [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] and a[1] == 1) or
              (a[0] in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] and a[1] == 2)):
            bot.reply_to(message, '–í—ã ‚ôí –í–æ–¥–æ–ª–µ–π')
        elif ((a[0] in [21, 22, 23, 24, 25, 26, 27, 28, 29] and a[1] == 2) or
              (a[0] in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] and a[1] == 3)):
            bot.reply_to(message, '–í—ã ‚ôì –†—ã–±—ã')

    else:
        sign = zodiac_signs.get(message.text)
        if sign:
            ph = {
                '‚ôàÔ∏è –û–≤–µ–Ω': 'https://cdn.fishki.net/upload/post/2019/08/20/3063203/tn/oven.jpg',
                '‚ôâ –¢–µ–ª–µ—Ü': 'https://cdn.fishki.net/upload/post/2019/08/20/3063203/tn/telec.jpg',
                '‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã': 'https://cdn.fishki.net/upload/post/2019/08/20/3063203/tn/bliznecy.jpg',
                '‚ôãÔ∏è –†–∞–∫': 'https://cdn.fishki.net/upload/post/2019/08/20/3063203/tn/rak.jpg',
                '‚ôå –õ–µ–≤': 'https://cdn.fishki.net/upload/post/2019/08/20/3063203/tn/lev.jpg',
                '‚ôç –î–µ–≤–∞': 'https://cdn.fishki.net/upload/post/2019/08/20/3063203/tn/deva.jpg',
                '‚ôé –í–µ—Å—ã': 'https://cdn.fishki.net/upload/post/2019/08/20/3063203/tn/vesy.jpg',
                '‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω': 'https://cdn.fishki.net/upload/post/2019/08/20/3063203/tn/skorpion.jpg',
                '‚ôê –°—Ç—Ä–µ–ª–µ—Ü': 'https://cdn.fishki.net/upload/post/2019/08/20/3063203/tn/strelec.jpg',
                '‚ôë –ö–æ–∑–µ—Ä–æ–≥': 'https://cdn.fishki.net/upload/post/2019/08/20/3063203/tn/kozerog.jpg',
                '‚ôí –í–æ–¥–æ–ª–µ–π': 'https://cdn.fishki.net/upload/post/2019/08/20/3063203/tn/vodolej.jpg',
                '‚ôì –†—ã–±—ã': 'https://cdn.fishki.net/upload/post/2019/08/20/3063203/tn/ryby.jpg'
            }
            tgidregister(message.from_user.id, message.from_user.first_name, sign)
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(*[InlineKeyboardButton(text=period, callback_data=f'{sign}|{period}') for period in
                           ['–≤—á–µ—Ä–∞', '—Å–µ–≥–æ–¥–Ω—è', '–∑–∞–≤—Ç—Ä–∞', '–Ω–µ–¥–µ–ª—è', '–º–µ—Å—è—Ü', '–≥–æ–¥']])
            bot.send_photo(message.from_user.id, get(ph[message.text]).content)
            bot.send_message(message.from_user.id, f'–ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø {message.text} –Ω–∞:', reply_markup=keyboard,
                             parse_mode="html")


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    el = call.data.split("|")
    period_text = {
        '–≤—á–µ—Ä–∞': 'yesterday',
        '—Å–µ–≥–æ–¥–Ω—è': 'today',
        '–∑–∞–≤—Ç—Ä–∞': 'tomorrow',
        '–Ω–µ–¥–µ–ª—è': 'week',
        '–º–µ—Å—è—Ü': 'month',
        '–≥–æ–¥': 'year'
    }
    bot.send_message(call.message.chat.id, getHoro(el[0], period_text[el[1]]), parse_mode="html",
                     disable_web_page_preview=True)




bot.polling(none_stop=True, interval=0)
